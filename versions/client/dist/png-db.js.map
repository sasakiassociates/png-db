{"version":3,"file":null,"sources":["../../../src/FieldTypes.js","../../../src/PngDB.js","../../../src/PngDBReader.js"],"sourcesContent":["'use strict';\r\nclass FieldTypes {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n\r\n    toString() {\r\n        return `FieldTypes.${this.name}`;\r\n    }\r\n\r\n    static isNumeric(name) {\r\n        return name === FieldTypes.INTEGER.name\r\n            || name === FieldTypes.DECIMAL.name;\r\n    }\r\n}\r\n\r\n/**\r\n * KEY values are stored as a flat JSON array with no compression. Use sparingly.\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.KEY = new FieldTypes('KEY');\r\n\r\n/**\r\n * TEXT values are stored as indexed values using an integer. The index (text strings for each integer) is stored in the main json file. Don't use this for primary keys or other values that don't repeat much.\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.TEXT = new FieldTypes('TEXT');\r\n\r\n/**\r\n * decimals are stored as integers representing the offset minimum value for each field and a multiplier for precision\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.DECIMAL = new FieldTypes('DECIMAL');\r\n\r\n/**\r\n * (3 bytes) up to 16,777,215 values\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.INTEGER = new FieldTypes('INTEGER');\r\n\r\nexport default FieldTypes;","import FieldTypes from \"./FieldTypes\";\r\n\r\n'use strict';\r\n/**\r\n * Node.js class for writing databases\r\n */\r\nexport default class PngDB {\r\n\r\n    constructor() {\r\n        this.fields = {};\r\n        this.metadata = {};\r\n        this.records = [];\r\n    }\r\n\r\n    /**\r\n     * Add a field to the database\r\n     * @param {String} fieldName (any string)\r\n     * @param {FieldTypes} type\r\n     * @param {Number} [precision] - an integer\r\n     */\r\n    addField(fieldName, type, precision) {\r\n        var ft = new FieldTypes();\r\n        this.fields[fieldName] = {type: type.name};\r\n        if (precision) {\r\n            this.fields[fieldName].precision = precision;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an Array field to the database. Arrays are represented as a large images tiled together.\r\n     * @param {String} fieldName (any string)\r\n     * @param {FieldTypes} type\r\n     * @param {Number} [precision] - an integer\r\n     */\r\n    addArrayField(fieldName, type, precision) {\r\n        this.addField(fieldName, type, precision);\r\n        this.fields[fieldName].treatAsArray = true;\r\n    }\r\n\r\n    /**\r\n     * add any metadata to be stored as JSON\r\n     * @param {String} key\r\n     * @param {Object} value\r\n     */\r\n    addMetaData(key, value) {\r\n        this.metadata[key] = value;\r\n    }\r\n\r\n    /**\r\n     * add a record object - object properties must match field names exactly\r\n     * @param {Object} record\r\n     */\r\n    addRecord(record) {\r\n        // console.log('Add record');\r\n        this.records.push(record);\r\n    }\r\n\r\n    _shiftBits(number, columns) {\r\n        if (!number) number = 0;\r\n        if (columns === 0) return number;\r\n        if (columns === 1) return number << 8;\r\n        if (columns === 2) return number << 16;\r\n        if (columns === 3) return number << 32;\r\n    }\r\n\r\n    _encodeFields(record, field1, field2) {\r\n        //(0x6633 << 16 | 0x3399).toString(16)\r\n        return this._shiftBits(record[field1], 2) | record[field2];\r\n    }\r\n}","import FieldTypes from \"./FieldTypes\";\r\nimport PngDB from \"./PngDB\";\r\n\r\n// var getPixels = require(\"get-pixels\");\r\n\r\n'use strict';\r\n/**\r\n * Node.js class for writing databases\r\n */\r\nexport default class PngDBReader extends PngDB {\r\n\r\n    constructor() {\r\n        super();\r\n        this.url = null;\r\n        this.cacheTime = new Date().getTime();\r\n    }\r\n\r\n    _getDir(url) {\r\n        const bits = url.split('/');\r\n        bits.pop();\r\n        return bits.join('/');\r\n    }\r\n\r\n    _getJSON(url) {\r\n        const xhr = new XMLHttpRequest();\r\n        return new Promise((resolve, reject) => {\r\n            xhr.onreadystatechange = function () {\r\n                if (xhr.readyState === 4) {\r\n                    if (xhr.status === 200) {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('GET', url);\r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n    load(url) {\r\n        this.url = url;\r\n        return new Promise((resolve, reject) => {\r\n            this._getJSON(url).then((data) => {\r\n                this.metadata = data.metadata;\r\n                this.fields = data.fields;\r\n                this.imageSize = data.imageSize;\r\n                this.records = [];\r\n                for (let i = 0; i < data.recordCount; i++) {\r\n                    this.records.push({});//empty for now, but will be populated when fields are loaded\r\n                }\r\n                resolve();\r\n            }, function (err) {\r\n                reject(err);\r\n            })\r\n        });\r\n    }\r\n\r\n    loadImagePixels(url, cb) {\r\n        const img = new Image();\r\n        img.crossOrigin = \"Anonymous\";\r\n        img.onload = function () {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            const context = canvas.getContext('2d');\r\n            context.drawImage(img, 0, 0);\r\n            const imageData = context.getImageData(0, 0, img.width, img.height);\r\n            cb(null, imageData.data);// ndarray(new Uint8Array(pixels.data), [img.width, img.height, 4], [4, 4*img.width, 1], 0))\r\n        };\r\n        img.onerror = function (err) {\r\n            cb(err)\r\n        };\r\n        console.log('Loading Image: ' + url);\r\n        img.src = url;\r\n    }\r\n\r\n    loadFields(fieldNames, forceRefresh) {\r\n        return new Promise((resolve, reject) => {\r\n            const calls = [];\r\n            fieldNames.forEach((fieldName, i) => {\r\n                calls.push(this.loadField(fieldName, forceRefresh));\r\n            });\r\n            Promise.all(calls)\r\n                .then(function (results) {\r\n                    resolve();\r\n                });\r\n        });\r\n    }\r\n\r\n    loadField(fieldName, forceRefresh) {\r\n        if (!this.url) throw 'Please load the database first';\r\n        let field = this.fields[fieldName];\r\n        if (!field) throw 'Unknown field ' + fieldName;\r\n\r\n        const dir = this._getDir(this.url);\r\n        return new Promise((resolve, reject) => {\r\n            if (field.dataLoaded && !forceRefresh) {\r\n                resolve();\r\n                return;\r\n            }\r\n            if (field.type === FieldTypes.KEY.name) {\r\n                this._getJSON(`${dir}/${encodeURIComponent(fieldName)}.json`).then((data) => {\r\n                    for (let i = 0; i < this.records.length; i++) {\r\n                        this.records[i][fieldName] = data[i];\r\n                    }\r\n                    field.dataLoaded = true;\r\n                    resolve();\r\n                }, function (err) {\r\n                    reject(err);\r\n                });\r\n                return;\r\n            }\r\n            this.loadImagePixels(`${dir}/${encodeURIComponent(fieldName)}.png?ac=${this.cacheTime}`, (err, pixels) => {\r\n                if (err) {\r\n                    reject(\"Bad image path: \" + err);\r\n                    return;\r\n                }\r\n\r\n                const valFromPixel = (pos) => {\r\n                    const a = pixels[pos + 3];\r\n                    if (a === 0) return null;\r\n\r\n                    const r = pixels[pos];\r\n                    const g = pixels[pos + 1];\r\n                    const b = pixels[pos + 2];\r\n\r\n                    let val = r << 16 | g << 8 | b;\r\n\r\n                    if (field.uniqueValues) {\r\n                        val = field.uniqueValues[val];\r\n                    } else {\r\n                        if (field.precision) {\r\n                            val /= field.precision;\r\n                        }\r\n\r\n                        if (field.range) {\r\n                            val += field.range.min;// we store the offset from the min value for smaller integers and also to allow signed values with the same methodology\r\n                        }\r\n                    }\r\n                    return val;\r\n                };\r\n\r\n                field.dataLoaded = true;\r\n                let val = null;\r\n                if (field.treatAsArray) {\r\n                    const numTilesEach = Math.ceil(Math.sqrt(field.longestArray));\r\n                    const pxSize = this.imageSize.width;\r\n                    const imgSize = pxSize * numTilesEach;\r\n                    let i = 0;\r\n                    for (let y = 0; y < pxSize; y++) {\r\n                        for (let x = 0; x < pxSize; x++) {\r\n                            const arr = [];\r\n                            for (let ty = 0; ty < numTilesEach; ty++) {\r\n                                for (let tx = 0; tx < numTilesEach; tx++) {\r\n                                    const xPos = tx * pxSize + x;\r\n                                    const yPos = ty * pxSize + y;\r\n                                    const pos = yPos * (imgSize * 4) + xPos * 4;\r\n\r\n                                    let val = valFromPixel(pos);\r\n                                    if (val !== null) {\r\n                                        arr.push(val);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (i < this.records.length) {\r\n                                this.records[i][fieldName] = arr;\r\n                            }\r\n                            i++;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < this.records.length; i++) {\r\n                        const pos = i * 4;\r\n                        val = valFromPixel(pos);\r\n                        this.records[i][fieldName] = val;\r\n                    }\r\n                }\r\n\r\n                resolve();\r\n            })\r\n        });\r\n    }\r\n\r\n    loadAllRecordsFromJson(url) {\r\n        this.url = url;\r\n        return new Promise((resolve, reject) => {\r\n            this._getJSON(url).then((data) => {\r\n                this.metadata = data.metadata;\r\n                this.fields = data.fields;\r\n                this.records = data.records;\r\n\r\n                Object.keys(this.fields).forEach((fieldName) => {\r\n                    const field = this.fields[fieldName];\r\n                    field.dataLoaded = true;\r\n                });\r\n                resolve();\r\n            }, function (err) {\r\n                reject(err);\r\n            })\r\n        });\r\n    }\r\n}"],"names":["FieldTypes","name","INTEGER","DECIMAL","KEY","TEXT","PngDB","fields","metadata","records","fieldName","type","precision","ft","addField","treatAsArray","key","value","record","push","number","columns","field1","field2","_shiftBits","PngDBReader","url","cacheTime","Date","getTime","bits","split","pop","join","xhr","XMLHttpRequest","Promise","resolve","reject","onreadystatechange","readyState","status","JSON","parse","responseText","open","send","_getJSON","then","data","imageSize","i","recordCount","err","cb","img","Image","crossOrigin","onload","canvas","document","createElement","width","height","context","getContext","drawImage","imageData","getImageData","onerror","log","src","fieldNames","forceRefresh","calls","forEach","loadField","all","results","field","dir","_getDir","dataLoaded","encodeURIComponent","length","loadImagePixels","pixels","valFromPixel","pos","a","r","g","b","val","uniqueValues","range","min","numTilesEach","Math","ceil","sqrt","longestArray","pxSize","imgSize","y","x","arr","ty","tx","xPos","yPos","keys"],"mappings":"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"}