{"version":3,"file":null,"sources":["../../../src/FieldTypes.js","../../../src/PngDB.js","../../../src/PngDBReader.js","../../../src/PngDBWriter.js"],"sourcesContent":["'use strict';\r\nclass FieldTypes {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n\r\n    toString() {\r\n        return `FieldTypes.${this.name}`;\r\n    }\r\n\r\n    static isNumeric(name) {\r\n        return name === FieldTypes.INTEGER.name\r\n            || name === FieldTypes.DECIMAL.name;\r\n    }\r\n}\r\n\r\n/**\r\n * KEY values are stored as a flat JSON array with no compression. Use sparingly.\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.KEY = new FieldTypes('KEY');\r\n\r\n/**\r\n * TEXT values are stored as indexed values using an integer. The index (text strings for each integer) is stored in the main json file. Don't use this for primary keys or other values that don't repeat much.\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.TEXT = new FieldTypes('TEXT');\r\n\r\n/**\r\n * decimals are stored as integers representing the offset minimum value for each field and a multiplier for precision\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.DECIMAL = new FieldTypes('DECIMAL');\r\n\r\n/**\r\n * (3 bytes) up to 16,777,215 values\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.INTEGER = new FieldTypes('INTEGER');\r\n\r\nexport default FieldTypes;","import FieldTypes from \"./FieldTypes\";\r\n\r\n'use strict';\r\n/**\r\n * Node.js class for writing databases\r\n */\r\nexport default class PngDB {\r\n\r\n    constructor() {\r\n        this.fields = {};\r\n        this.metadata = {};\r\n        this.records = [];\r\n    }\r\n\r\n    /**\r\n     * Add a field to the database\r\n     * @param {String} fieldName (any string)\r\n     * @param {FieldTypes} type\r\n     * @param {Number} [precision] - an integer\r\n     */\r\n    addField(fieldName, type, precision) {\r\n        var ft = new FieldTypes();\r\n        this.fields[fieldName] = {type: type.name};\r\n        if (precision) {\r\n            this.fields[fieldName].precision = precision;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * add any metadata to be stored as JSON\r\n     * @param {String} key\r\n     * @param {Object} value\r\n     */\r\n    addMetaData(key, value) {\r\n        this.metadata[key] = value;\r\n    }\r\n\r\n    /**\r\n     * add a record object - object properties must match field names exactly\r\n     * @param {Object} record\r\n     */\r\n    addRecord(record) {\r\n        // console.log('Add record');\r\n        this.records.push(record);\r\n    }\r\n\r\n    _shiftBits(number, columns) {\r\n        if (!number) number = 0;\r\n        if (columns === 0) return number;\r\n        if (columns === 1) return number << 8;\r\n        if (columns === 2) return number << 16;\r\n        if (columns === 3) return number << 32;\r\n    }\r\n\r\n    _encodeFields(record, field1, field2) {\r\n        //(0x6633 << 16 | 0x3399).toString(16)\r\n        return this._shiftBits(record[field1], 2) | record[field2];\r\n    }\r\n}","import FieldTypes from \"./FieldTypes\";\r\nimport PngDB from \"./PngDB\";\r\n\r\n// var getPixels = require(\"get-pixels\");\r\n\r\n'use strict';\r\n/**\r\n * Node.js class for writing databases\r\n */\r\nexport default class PngDBReader extends PngDB {\r\n\r\n    constructor() {\r\n        super();\r\n        this.url = null;\r\n        this.cacheTime = new Date().getTime();\r\n    }\r\n\r\n    _getDir(url) {\r\n        var bits = url.split('/');\r\n        bits.pop();\r\n        return bits.join('/');\r\n    }\r\n\r\n    _getJSON(url) {\r\n        var xhr = new XMLHttpRequest();\r\n        return new Promise((resolve, reject) => {\r\n            xhr.onreadystatechange = function () {\r\n                if (xhr.readyState === 4) {\r\n                    if (xhr.status === 200) {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('GET', url);\r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n    load(url) {\r\n        this.url = url;\r\n        return new Promise((resolve, reject) => {\r\n            this._getJSON(url).then((data) => {\r\n                this.metadata = data.metadata;\r\n                this.fields = data.fields;\r\n                this.imageSize = data.imageSize;\r\n                this.records = [];\r\n                for (var i = 0; i < data.recordCount; i++) {\r\n                    this.records.push({});//empty for now, but will be populated when fields are loaded\r\n                }\r\n                resolve();\r\n            }, function (err) {\r\n                reject(err);\r\n            })\r\n        });\r\n    }\r\n\r\n    loadImagePixels(url, cb) {\r\n        var img = new Image();\r\n        img.crossOrigin = \"Anonymous\";\r\n        img.onload = function () {\r\n            var canvas = document.createElement('canvas');\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            var context = canvas.getContext('2d');\r\n            context.drawImage(img, 0, 0);\r\n            var imageData = context.getImageData(0, 0, img.width, img.height);\r\n            cb(null, imageData.data);// ndarray(new Uint8Array(pixels.data), [img.width, img.height, 4], [4, 4*img.width, 1], 0))\r\n        };\r\n        img.onerror = function (err) {\r\n            cb(err)\r\n        };\r\n        console.log('Loading Image: ' + url);\r\n        img.src = url;\r\n    }\r\n\r\n    loadFields(fieldNames, forceRefresh) {\r\n        return new Promise((resolve, reject) => {\r\n            var calls = [];\r\n            fieldNames.forEach((fieldName, i) => {\r\n                calls.push(this.loadField(fieldName, forceRefresh));\r\n            });\r\n            Promise.all(calls)\r\n                .then(function (results) {\r\n                    resolve();\r\n                });\r\n        });\r\n    }\r\n\r\n    loadField(fieldName, forceRefresh) {\r\n        if (!this.url) throw 'Please load the database first';\r\n        var field = this.fields[fieldName];\r\n        if (!field) throw 'Unknown field ' + fieldName;\r\n\r\n        var dir = this._getDir(this.url);\r\n        return new Promise((resolve, reject) => {\r\n            if (field.dataLoaded && !forceRefresh) {\r\n                resolve();\r\n                return;\r\n            }\r\n            if (field.type === FieldTypes.KEY.name) {\r\n                this._getJSON(`${dir}/${encodeURIComponent(fieldName)}.json`).then((data) => {\r\n                    for (var i = 0; i < this.records.length; i++) {\r\n                        this.records[i][fieldName] = data[i];\r\n                    }\r\n                    field.dataLoaded = true;\r\n                    resolve();\r\n                }, function (err) {\r\n                    reject(err);\r\n                });\r\n                return;\r\n            }\r\n            this.loadImagePixels(`${dir}/${encodeURIComponent(fieldName)}.png?ac=${this.cacheTime}`, (err, pixels) => {\r\n                if (err) {\r\n                    reject(\"Bad image path: \" + err);\r\n                    return;\r\n                }\r\n                field.dataLoaded = true;\r\n                for (var i = 0; i < this.records.length; i++) {\r\n                    var pos = i * 4;\r\n                    var r = pixels[pos];\r\n                    var g = pixels[pos + 1];\r\n                    var b = pixels[pos + 2];\r\n                    // var a = pixels[pos + 3];\r\n                    var val = r << 16 | g << 8 | b;\r\n\r\n                    if (field.uniqueValues) {\r\n                        val = field.uniqueValues[val];\r\n                    } else {\r\n                        if (field.precision) {\r\n                            val /= field.precision;\r\n                        }\r\n\r\n                        if (field.range) {\r\n                            val += field.range.min;// we store the offset from the min value for smaller integers and also to allow signed values with the same methodology\r\n                        }\r\n                    }\r\n\r\n                    this.records[i][fieldName] = val;\r\n                }\r\n                resolve();\r\n            })\r\n        });\r\n    }\r\n\r\n    loadAllRecordsFromJson(url) {\r\n        this.url = url;\r\n        return new Promise((resolve, reject) => {\r\n            this._getJSON(url).then((data) => {\r\n                this.metadata = data.metadata;\r\n                this.fields = data.fields;\r\n                this.records = data.records;\r\n\r\n                Object.keys(this.fields).forEach((fieldName) => {\r\n                    var field = this.fields[fieldName];\r\n                    field.dataLoaded = true;\r\n                });\r\n                resolve();\r\n            }, function (err) {\r\n                reject(err);\r\n            })\r\n        });\r\n    }\r\n}","var fs = require(\"fs\");\r\nvar path = require(\"path\");\r\nimport FieldTypes from \"./FieldTypes\";\r\nimport PngDB from \"./PngDB\";\r\n\r\n'use strict';\r\n/**\r\n * Node.js class for writing databases\r\n */\r\nexport default class PngDBWriter extends PngDB {\r\n\r\n    constructor({quantiles = 0} = {}) {\r\n        super();\r\n\r\n        this.MAX_VALUE = 255 * 256 * 256 - 1;\r\n        this.stats = {\r\n            quantiles: quantiles//e.g. use 4 for 'quartiles' (25th percentile, 50th percentile etc)\r\n        };\r\n    }\r\n\r\n    save(saveAs) {\r\n        try {\r\n            var size = this.records.length;\r\n            var pxSize = Math.ceil(Math.sqrt(size));\r\n\r\n            console.log(`Saving ${size} records (width = ${pxSize}) ...`);\r\n\r\n            var dir = path.dirname(saveAs);\r\n\r\n            if (!fs.existsSync(dir)){\r\n                console.log(`Making dir ${dir} ...`);\r\n                fs.mkdirSync(dir);\r\n            }\r\n\r\n\r\n            Object.keys(this.fields).forEach((k) => {\r\n                var field = this.fields[k];\r\n                if (field.type === FieldTypes.TEXT.name) {\r\n                    field.uniqueValues = [];\r\n                }\r\n                if (!FieldTypes.isNumeric(field.type)) return;\r\n                field.range = {min: Number.MAX_VALUE, max: -Number.MAX_VALUE};\r\n            });\r\n\r\n            var sortedValues = {};\r\n\r\n            this.records.forEach((record, i) => {\r\n                Object.keys(this.fields).forEach((k) => {\r\n                    var field = this.fields[k];\r\n                    var value = record[k];\r\n                    if (this.stats.quantiles > 1) {\r\n                        if (!sortedValues[k]) sortedValues[k] = [];\r\n                        sortedValues[k].push(value);\r\n                    }\r\n                    if (field.range) {\r\n                        if (typeof value !== \"undefined\") {\r\n                            field.range.min = Math.min(field.range.min, value);\r\n                            field.range.max = Math.max(field.range.max, value);\r\n                        }\r\n                    }\r\n                    if (field.uniqueValues && field.uniqueValues.indexOf(value) < 0) {\r\n                        field.uniqueValues.push(value);\r\n                    }\r\n                });\r\n            });\r\n\r\n            let sortNumber = (a, b) => {\r\n                return a - b;\r\n            };\r\n\r\n            Object.keys(this.fields).forEach((k) => {\r\n                var field = this.fields[k];\r\n                if (field.range && field.range.max > this.MAX_VALUE) {\r\n                    field.precision = (this.MAX_VALUE - 1) / field.range.max;//use -1 to prevent floating point errors exceeding\r\n                }\r\n\r\n                if (field.range && this.stats.quantiles > 1) {\r\n                    sortedValues[k].sort(sortNumber);\r\n                    field.quantiles = [];\r\n                    for (let i = 1; i < this.stats.quantiles; i++) {\r\n                        let frac = i / this.stats.quantiles;\r\n                        let pos = Math.round(frac * sortedValues[k].length);\r\n                        field.quantiles.push({\r\n                            position: 100 * frac,\r\n                            value: sortedValues[k][pos],\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            var metaDataFile = {\r\n                metadata: this.metadata,\r\n                fields: this.fields,\r\n                recordCount: size,\r\n                imageSize: {width: pxSize, height: pxSize}\r\n            };\r\n\r\n            fs.writeFile(saveAs, JSON.stringify(metaDataFile, null, 2), (err) => {\r\n                if (err) throw err;\r\n                console.log('Saved ' + saveAs);\r\n            });\r\n\r\n            Object.keys(this.fields).forEach((fieldName) => {\r\n                var field = this.fields[fieldName];\r\n                if (field.type === FieldTypes.KEY.name) {\r\n                    this.writeKeyData(dir, fieldName, field);\r\n                } else {\r\n                    this.writePngData(dir, fieldName, field, pxSize);\r\n                }\r\n            });\r\n        } catch (e) {\r\n            console.error(e, e.stack);//for some reason errors aren't always reported in Node.js so we catch and report them here\r\n        }\r\n    }\r\n\r\n    writeKeyData(dir, fieldName, field) {\r\n        var recordKeys = [];\r\n        var fileName = `${fieldName}.json`;\r\n        this.records.forEach(function (record, i) {\r\n            recordKeys.push(record[fieldName]);\r\n        });\r\n        fs.writeFile(path.join(dir, fileName), JSON.stringify(recordKeys), (err) => {\r\n            if (err) throw err;\r\n            console.log('Saved ' + fileName);\r\n        });\r\n    }\r\n\r\n    writePngData(dir, fieldName, field, pxSize) {\r\n        var Jimp = require(\"jimp\");\r\n        new Jimp(pxSize, pxSize, (err, image) => {\r\n            var i = 0;\r\n            for (var y = 0; y < pxSize; y++) {\r\n                for (var x = 0; x < pxSize; x++) {\r\n                    var record = this.records[i++];\r\n                    if (record) {\r\n                        var value = 0;\r\n                        if (field.uniqueValues) {\r\n                            value = field.uniqueValues.indexOf(record[fieldName]);\r\n                        } else {\r\n                            value = record[fieldName]\r\n                        }\r\n                        if (field.range) {\r\n                            value = value - field.range.min;//store the offset from the min value for smaller integers and also to allow signed values with the same methodology\r\n                        }\r\n                        if (field.precision) {\r\n                            value = Math.round(value * field.precision);\r\n                        } else {\r\n                            value = Math.round(value);\r\n                        }\r\n                        if (value > this.MAX_VALUE) {\r\n                            console.warn(`Maximum value exceeded for ${fieldName}: ${value} (TRUNCATED)`);\r\n                            value = this.MAX_VALUE;\r\n                        }\r\n                        var encodedValue = 0;\r\n                        if (value > 255) {\r\n                            var r = 0;\r\n                            var b = value % 256;\r\n                            var g = Math.floor(value / 256);\r\n\r\n                            if (g > 255) {\r\n                                r = Math.floor(g / 256);\r\n                                g = g % 256;\r\n                            }\r\n                            encodedValue = Jimp.rgbaToInt(r, g, b, 255);\r\n                        } else {\r\n                            encodedValue = Jimp.rgbaToInt(0, 0, value, 255);\r\n                        }\r\n                        image.setPixelColor(encodedValue, x, y);\r\n                    }\r\n                }\r\n            }\r\n            var fileName = `${fieldName}.png`;\r\n            image.write(path.join(dir, fileName));\r\n            console.log(`${fileName} saved`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use this method to provide an alternative way to load and save data (as JSON)\r\n     * @param saveAs\r\n     */\r\n    saveAllRecordsAsJson(saveAs) {\r\n        var fullDataFile = {\r\n            metadata: this.metadata,\r\n            fields: this.fields,\r\n            records: this.records\r\n        };\r\n\r\n        fs.writeFile(saveAs, JSON.stringify(fullDataFile, null, 2), (err) => {\r\n            if (err) throw err;\r\n            console.log('Saved ' + saveAs);\r\n        });\r\n    }\r\n\r\n}"],"names":["FieldTypes","name","INTEGER","DECIMAL","KEY","TEXT","PngDB","fields","metadata","records","fieldName","type","precision","ft","key","value","record","push","number","columns","field1","field2","_shiftBits","PngDBReader","url","cacheTime","Date","getTime","bits","split","pop","join","xhr","XMLHttpRequest","Promise","resolve","reject","onreadystatechange","readyState","status","JSON","parse","responseText","open","send","_getJSON","then","data","imageSize","i","recordCount","err","cb","img","Image","crossOrigin","onload","canvas","document","createElement","width","height","context","getContext","drawImage","imageData","getImageData","onerror","log","src","fieldNames","forceRefresh","calls","forEach","loadField","all","results","field","dir","_getDir","dataLoaded","encodeURIComponent","length","loadImagePixels","pixels","pos","r","g","b","val","uniqueValues","range","min","keys","fs","require","path","PngDBWriter","quantiles","MAX_VALUE","stats","saveAs","size","pxSize","sortedValues","metaDataFile","Math","ceil","sqrt","dirname","existsSync","mkdirSync","k","isNumeric","Number","max","indexOf","sortNumber","a","sort","frac","round","writeFile","stringify","writeKeyData","writePngData","e","error","stack","recordKeys","fileName","Jimp","image","y","x","warn","encodedValue","floor","rgbaToInt","setPixelColor","write","fullDataFile"],"mappings":"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"}