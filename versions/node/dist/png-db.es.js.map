{"version":3,"file":null,"sources":["../../../src/FieldTypes.js","../../../src/PngDB.js","../../../src/PngDBReader.js","../../../src/PngDBWriter.js"],"sourcesContent":["'use strict';\r\nclass FieldTypes {\r\n    constructor(name) {\r\n        this.name = name;\r\n    }\r\n\r\n    toString() {\r\n        return `FieldTypes.${this.name}`;\r\n    }\r\n\r\n    static isNumeric(name) {\r\n        return name === FieldTypes.INTEGER.name\r\n            || name === FieldTypes.DECIMAL.name;\r\n    }\r\n}\r\n\r\n/**\r\n * KEY values are stored as a flat JSON array with no compression. Use sparingly.\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.KEY = new FieldTypes('KEY');\r\n\r\n/**\r\n * TEXT values are stored as indexed values using an integer. The index (text strings for each integer) is stored in the main json file. Don't use this for primary keys or other values that don't repeat much.\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.TEXT = new FieldTypes('TEXT');\r\n\r\n/**\r\n * decimals are stored as integers representing the offset minimum value for each field and a multiplier for precision\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.DECIMAL = new FieldTypes('DECIMAL');\r\n\r\n/**\r\n * (3 bytes) up to 16,777,215 values\r\n * @type {FieldTypes}\r\n */\r\nFieldTypes.INTEGER = new FieldTypes('INTEGER');\r\n\r\nexport default FieldTypes;","import FieldTypes from \"./FieldTypes\";\r\n\r\n'use strict';\r\n/**\r\n * Node.js class for writing databases\r\n */\r\nexport default class PngDB {\r\n\r\n    constructor() {\r\n        this.fields = {};\r\n        this.metadata = {};\r\n        this.records = [];\r\n    }\r\n\r\n    /**\r\n     * Add a field to the database\r\n     * @param {String} fieldName (any string)\r\n     * @param {FieldTypes} type\r\n     * @param {Number} [precision] - an integer\r\n     */\r\n    addField(fieldName, type, precision) {\r\n        var ft = new FieldTypes();\r\n        this.fields[fieldName] = {type: type.name};\r\n        if (precision) {\r\n            this.fields[fieldName].precision = precision;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Add an Array field to the database. Arrays are represented as a large images tiled together.\r\n     * @param {String} fieldName (any string)\r\n     * @param {FieldTypes} type\r\n     * @param {Number} [precision] - an integer\r\n     */\r\n    addArrayField(fieldName, type, precision) {\r\n        this.addField(fieldName, type, precision);\r\n        this.fields[fieldName].treatAsArray = true;\r\n    }\r\n\r\n    /**\r\n     * add any metadata to be stored as JSON\r\n     * @param {String} key\r\n     * @param {Object} value\r\n     */\r\n    addMetaData(key, value) {\r\n        this.metadata[key] = value;\r\n    }\r\n\r\n    /**\r\n     * add a record object - object properties must match field names exactly\r\n     * @param {Object} record\r\n     */\r\n    addRecord(record) {\r\n        // console.log('Add record');\r\n        this.records.push(record);\r\n    }\r\n\r\n    _shiftBits(number, columns) {\r\n        if (!number) number = 0;\r\n        if (columns === 0) return number;\r\n        if (columns === 1) return number << 8;\r\n        if (columns === 2) return number << 16;\r\n        if (columns === 3) return number << 32;\r\n    }\r\n\r\n    _encodeFields(record, field1, field2) {\r\n        //(0x6633 << 16 | 0x3399).toString(16)\r\n        return this._shiftBits(record[field1], 2) | record[field2];\r\n    }\r\n}","import FieldTypes from \"./FieldTypes\";\r\nimport PngDB from \"./PngDB\";\r\n\r\n// var getPixels = require(\"get-pixels\");\r\n\r\n'use strict';\r\n/**\r\n * Node.js class for writing databases\r\n */\r\nexport default class PngDBReader extends PngDB {\r\n\r\n    constructor() {\r\n        super();\r\n        this.url = null;\r\n        this.cacheTime = new Date().getTime();\r\n    }\r\n\r\n    _getDir(url) {\r\n        const bits = url.split('/');\r\n        bits.pop();\r\n        return bits.join('/');\r\n    }\r\n\r\n    _getJSON(url) {\r\n        const xhr = new XMLHttpRequest();\r\n        return new Promise((resolve, reject) => {\r\n            xhr.onreadystatechange = function () {\r\n                if (xhr.readyState === 4) {\r\n                    if (xhr.status === 200) {\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.open('GET', url);\r\n            xhr.send();\r\n        });\r\n    }\r\n\r\n    load(url) {\r\n        this.url = url;\r\n        return new Promise((resolve, reject) => {\r\n            this._getJSON(url).then((data) => {\r\n                this.metadata = data.metadata;\r\n                this.fields = data.fields;\r\n                this.imageSize = data.imageSize;\r\n                this.records = [];\r\n                for (let i = 0; i < data.recordCount; i++) {\r\n                    this.records.push({});//empty for now, but will be populated when fields are loaded\r\n                }\r\n                resolve();\r\n            }, function (err) {\r\n                reject(err);\r\n            })\r\n        });\r\n    }\r\n\r\n    loadImagePixels(url, cb) {\r\n        const img = new Image();\r\n        img.crossOrigin = \"Anonymous\";\r\n        img.onload = function () {\r\n            const canvas = document.createElement('canvas');\r\n            canvas.width = img.width;\r\n            canvas.height = img.height;\r\n            const context = canvas.getContext('2d');\r\n            context.drawImage(img, 0, 0);\r\n            const imageData = context.getImageData(0, 0, img.width, img.height);\r\n            cb(null, imageData.data);// ndarray(new Uint8Array(pixels.data), [img.width, img.height, 4], [4, 4*img.width, 1], 0))\r\n        };\r\n        img.onerror = function (err) {\r\n            cb(err)\r\n        };\r\n        console.log('Loading Image: ' + url);\r\n        img.src = url;\r\n    }\r\n\r\n    loadFields(fieldNames, forceRefresh) {\r\n        return new Promise((resolve, reject) => {\r\n            const calls = [];\r\n            fieldNames.forEach((fieldName, i) => {\r\n                calls.push(this.loadField(fieldName, forceRefresh));\r\n            });\r\n            Promise.all(calls)\r\n                .then(function (results) {\r\n                    resolve();\r\n                });\r\n        });\r\n    }\r\n\r\n    loadField(fieldName, forceRefresh) {\r\n        if (!this.url) throw 'Please load the database first';\r\n        let field = this.fields[fieldName];\r\n        if (!field) throw 'Unknown field ' + fieldName;\r\n\r\n        const dir = this._getDir(this.url);\r\n        return new Promise((resolve, reject) => {\r\n            if (field.dataLoaded && !forceRefresh) {\r\n                resolve();\r\n                return;\r\n            }\r\n            if (field.type === FieldTypes.KEY.name) {\r\n                this._getJSON(`${dir}/${encodeURIComponent(fieldName)}.json`).then((data) => {\r\n                    for (let i = 0; i < this.records.length; i++) {\r\n                        this.records[i][fieldName] = data[i];\r\n                    }\r\n                    field.dataLoaded = true;\r\n                    resolve();\r\n                }, function (err) {\r\n                    reject(err);\r\n                });\r\n                return;\r\n            }\r\n            this.loadImagePixels(`${dir}/${encodeURIComponent(fieldName)}.png?ac=${this.cacheTime}`, (err, pixels) => {\r\n                if (err) {\r\n                    reject(\"Bad image path: \" + err);\r\n                    return;\r\n                }\r\n\r\n                const valFromPixel = (pos) => {\r\n                    const a = pixels[pos + 3];\r\n                    if (a === 0) return null;\r\n\r\n                    const r = pixels[pos];\r\n                    const g = pixels[pos + 1];\r\n                    const b = pixels[pos + 2];\r\n\r\n                    let val = r << 16 | g << 8 | b;\r\n\r\n                    if (field.uniqueValues) {\r\n                        val = field.uniqueValues[val];\r\n                    } else {\r\n                        if (field.precision) {\r\n                            val /= field.precision;\r\n                        }\r\n\r\n                        if (field.range) {\r\n                            val += field.range.min;// we store the offset from the min value for smaller integers and also to allow signed values with the same methodology\r\n                        }\r\n                    }\r\n                    return val;\r\n                };\r\n\r\n                field.dataLoaded = true;\r\n                let val = null;\r\n                if (field.treatAsArray) {\r\n                    const numTilesEach = Math.ceil(Math.sqrt(field.longestArray));\r\n                    const pxSize = this.imageSize.width;\r\n                    const imgSize = pxSize * numTilesEach;\r\n                    let i = 0;\r\n                    for (let y = 0; y < pxSize; y++) {\r\n                        for (let x = 0; x < pxSize; x++) {\r\n                            const arr = [];\r\n                            for (let ty = 0; ty < numTilesEach; ty++) {\r\n                                for (let tx = 0; tx < numTilesEach; tx++) {\r\n                                    const xPos = tx * pxSize + x;\r\n                                    const yPos = ty * pxSize + y;\r\n                                    const pos = yPos * (imgSize * 4) + xPos * 4;\r\n\r\n                                    let val = valFromPixel(pos);\r\n                                    if (val !== null) {\r\n                                        arr.push(val);\r\n                                    }\r\n                                }\r\n                            }\r\n                            if (i < this.records.length) {\r\n                                this.records[i][fieldName] = arr;\r\n                            }\r\n                            i++;\r\n                        }\r\n                    }\r\n                } else {\r\n                    for (let i = 0; i < this.records.length; i++) {\r\n                        const pos = i * 4;\r\n                        val = valFromPixel(pos);\r\n                        this.records[i][fieldName] = val;\r\n                    }\r\n                }\r\n\r\n                resolve();\r\n            })\r\n        });\r\n    }\r\n\r\n    loadAllRecordsFromJson(url) {\r\n        this.url = url;\r\n        return new Promise((resolve, reject) => {\r\n            this._getJSON(url).then((data) => {\r\n                this.metadata = data.metadata;\r\n                this.fields = data.fields;\r\n                this.records = data.records;\r\n\r\n                Object.keys(this.fields).forEach((fieldName) => {\r\n                    const field = this.fields[fieldName];\r\n                    field.dataLoaded = true;\r\n                });\r\n                resolve();\r\n            }, function (err) {\r\n                reject(err);\r\n            })\r\n        });\r\n    }\r\n}","const fs = require(\"fs\");\r\nconst path = require(\"path\");\r\nimport FieldTypes from \"./FieldTypes\";\r\nimport PngDB from \"./PngDB\";\r\n\r\n'use strict';\r\n/**\r\n * Node.js class for writing databases\r\n */\r\nexport default class PngDBWriter extends PngDB {\r\n\r\n    constructor({quantiles = 0} = {}) {\r\n        super();\r\n\r\n        this.MAX_VALUE = 255 * 256 * 256 - 1;\r\n        this.stats = {\r\n            quantiles: quantiles//e.g. use 4 for 'quartiles' (25th percentile, 50th percentile etc)\r\n        };\r\n    }\r\n\r\n    save(saveAs) {\r\n        try {\r\n            const size = this.records.length;\r\n            const pxSize = Math.ceil(Math.sqrt(size));\r\n\r\n            console.log(`Saving ${size} records (width = ${pxSize}) ...`);\r\n\r\n            const dir = path.dirname(saveAs);\r\n\r\n            if (!fs.existsSync(dir)) {\r\n                console.log(`Making dir ${dir} ...`);\r\n                fs.mkdirSync(dir);\r\n            }\r\n\r\n\r\n            Object.keys(this.fields).forEach((k) => {\r\n                const field = this.fields[k];\r\n                if (field.type === FieldTypes.TEXT.name) {\r\n                    field.uniqueValues = [];\r\n                }\r\n                if (!FieldTypes.isNumeric(field.type)) return;\r\n                field.range = {min: Number.MAX_VALUE, max: -Number.MAX_VALUE};\r\n            });\r\n\r\n            const sortedValues = {};\r\n\r\n            this.records.forEach((record, i) => {\r\n                Object.keys(this.fields).forEach((k) => {\r\n                    const field = this.fields[k];\r\n                    let value = record[k];\r\n                    if (this.stats.quantiles > 1) {\r\n                        if (!sortedValues[k]) sortedValues[k] = [];\r\n                        sortedValues[k].push(value);\r\n                    }\r\n                    if (field.range) {\r\n                        if (field.treatAsArray) {\r\n                            if (value && value.length > 0) {\r\n                                for (let j = 0; j < value.length; j++) {\r\n                                    const v = value[j];\r\n                                    field.range.min = Math.min(field.range.min, v);\r\n                                    field.range.max = Math.max(field.range.max, v);\r\n                                }\r\n                            }\r\n                        } else {\r\n                            if (typeof value !== \"undefined\") {\r\n                                field.range.min = Math.min(field.range.min, value);\r\n                                field.range.max = Math.max(field.range.max, value);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    if (field.uniqueValues && field.uniqueValues.indexOf(value) < 0) {\r\n                        field.uniqueValues.push(value);\r\n                    }\r\n                });\r\n            });\r\n\r\n            let sortNumber = (a, b) => {\r\n                return a - b;\r\n            };\r\n\r\n            Object.keys(this.fields).forEach((k) => {\r\n                const field = this.fields[k];\r\n                if (field.range && field.range.max > this.MAX_VALUE) {\r\n                    field.precision = (this.MAX_VALUE - 1) / field.range.max;//use -1 to prevent floating point errors exceeding\r\n                }\r\n\r\n                if (field.range && !field.treatAsArray && this.stats.quantiles > 1) {\r\n                    sortedValues[k].sort(sortNumber);\r\n                    field.quantiles = [];\r\n                    for (let i = 1; i < this.stats.quantiles; i++) {\r\n                        let frac = i / this.stats.quantiles;\r\n                        let pos = Math.round(frac * sortedValues[k].length);\r\n                        field.quantiles.push({\r\n                            position: 100 * frac,\r\n                            value: sortedValues[k][pos],\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            const metaDataFile = {\r\n                metadata: this.metadata,\r\n                fields: this.fields,\r\n                recordCount: size,\r\n                imageSize: {width: pxSize, height: pxSize}\r\n            };\r\n\r\n            Object.keys(this.fields).forEach((fieldName) => {\r\n                const field = this.fields[fieldName];\r\n                if (field.type === FieldTypes.KEY.name) {\r\n                    this.writeKeyData(dir, fieldName, field);\r\n                } else {\r\n                    this.writePngData(dir, fieldName, field, pxSize);\r\n                }\r\n            });\r\n\r\n            fs.writeFile(saveAs, JSON.stringify(metaDataFile, null, 2), (err) => {\r\n                if (err) throw err;\r\n                console.log('Saved ' + saveAs);\r\n            });\r\n        } catch (e) {\r\n            console.error(e, e.stack);//for some reason errors aren't always reported in Node.js so we catch and report them here\r\n        }\r\n    }\r\n\r\n    writeKeyData(dir, fieldName, field) {\r\n        const recordKeys = [];\r\n        const fileName = `${fieldName}.json`;\r\n        this.records.forEach(function (record, i) {\r\n            recordKeys.push(record[fieldName]);\r\n        });\r\n        fs.writeFile(path.join(dir, fileName), JSON.stringify(recordKeys), (err) => {\r\n            if (err) throw err;\r\n            console.log('Saved ' + fileName);\r\n        });\r\n    }\r\n\r\n    writePngData(dir, fieldName, field, pxSize) {\r\n        const Jimp = require(\"jimp\");\r\n\r\n        let imgSize = pxSize;\r\n        let numTilesEach = 0;\r\n        if (field.treatAsArray) {\r\n            let maxLen = 0;\r\n            for (let i = 0; i < this.records.length; i++) {\r\n                const record = this.records[i++];\r\n                const arr = record[fieldName];\r\n\r\n                if (arr != null) {\r\n                    if (!Array.isArray(arr)) {\r\n                        throw `Array value expected on record ${i}: Found ${arr}`;\r\n                    }\r\n                    maxLen = Math.max(maxLen, arr.length);\r\n                }\r\n            }\r\n            field.longestArray = maxLen;\r\n            numTilesEach = Math.ceil(Math.sqrt(maxLen));\r\n            imgSize = pxSize * numTilesEach;\r\n        }\r\n\r\n        const setPixel = (image, x, y, value) => {\r\n            if (field.range) {\r\n                value = value - field.range.min;//store the offset from the min value for smaller integers and also to allow signed values with the same methodology\r\n            }\r\n            if (field.precision) {\r\n                value = Math.round(value * field.precision);\r\n            } else {\r\n                value = Math.round(value);\r\n            }\r\n            if (value > this.MAX_VALUE) {\r\n                console.warn(`Maximum value exceeded for ${fieldName}: ${value} (TRUNCATED)`);\r\n                value = this.MAX_VALUE;\r\n            }\r\n            let encodedValue = 0;\r\n            if (value > 255) {\r\n                let r = 0;\r\n                const b = value % 256;\r\n                let g = Math.floor(value / 256);\r\n\r\n                if (g > 255) {\r\n                    r = Math.floor(g / 256);\r\n                    g = g % 256;\r\n                }\r\n                encodedValue = Jimp.rgbaToInt(r, g, b, 255);\r\n            } else {\r\n                encodedValue = Jimp.rgbaToInt(0, 0, value, 255);\r\n            }\r\n            image.setPixelColor(encodedValue, x, y);\r\n        };\r\n\r\n        new Jimp(imgSize, imgSize, (err, image) => {\r\n            if (field.treatAsArray) {\r\n\r\n                let i = 0;\r\n                for (let y = 0; y < pxSize; y++) {\r\n                    for (let x = 0; x < pxSize; x++) {\r\n                        const record = this.records[i++];\r\n                        if (!record) continue;\r\n                        const arr = record[fieldName];\r\n                        if (!arr) return;\r\n                        let a = 0;\r\n                        for (let ty = 0; ty < numTilesEach; ty++) {\r\n                            for (let tx = 0; tx < numTilesEach; tx++) {\r\n                                if (a < arr.length) {\r\n                                    const value = arr[a];\r\n                                    if (value !== null) {\r\n                                        setPixel(image, tx * pxSize + x, ty * pxSize + y, value);\r\n                                    }\r\n                                }\r\n                                a++;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                let i = 0;\r\n                for (let y = 0; y < pxSize; y++) {\r\n                    for (let x = 0; x < pxSize; x++) {\r\n                        const record = this.records[i++];\r\n                        if (!record) continue;\r\n                        let value = 0;\r\n                        if (field.uniqueValues) {\r\n                            value = field.uniqueValues.indexOf(record[fieldName]);\r\n                        } else {\r\n                            value = record[fieldName];\r\n                        }\r\n                        setPixel(image, x, y, value);\r\n                    }\r\n                }\r\n            }\r\n            const fileName = `${fieldName}.png`;\r\n            image.write(path.join(dir, fileName));\r\n            console.log(`${fileName} saved`);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Use this method to provide an alternative way to load and save data (as JSON)\r\n     * @param saveAs\r\n     */\r\n    saveAllRecordsAsJson(saveAs) {\r\n        const fullDataFile = {\r\n            metadata: this.metadata,\r\n            fields: this.fields,\r\n            records: this.records\r\n        };\r\n\r\n        fs.writeFile(saveAs, JSON.stringify(fullDataFile, null, 2), (err) => {\r\n            if (err) throw err;\r\n            console.log('Saved ' + saveAs);\r\n        });\r\n    }\r\n\r\n}"],"names":["FieldTypes","name","INTEGER","DECIMAL","KEY","TEXT","PngDB","fields","metadata","records","fieldName","type","precision","ft","addField","treatAsArray","key","value","record","push","number","columns","field1","field2","_shiftBits","PngDBReader","url","cacheTime","Date","getTime","bits","split","pop","join","xhr","XMLHttpRequest","Promise","resolve","reject","onreadystatechange","readyState","status","JSON","parse","responseText","open","send","_getJSON","then","data","imageSize","i","recordCount","err","cb","img","Image","crossOrigin","onload","canvas","document","createElement","width","height","context","getContext","drawImage","imageData","getImageData","onerror","log","src","fieldNames","forceRefresh","calls","forEach","loadField","all","results","field","dir","_getDir","dataLoaded","encodeURIComponent","length","loadImagePixels","pixels","valFromPixel","pos","a","r","g","b","val","uniqueValues","range","min","numTilesEach","Math","ceil","sqrt","longestArray","pxSize","imgSize","y","x","arr","ty","tx","xPos","yPos","keys","fs","require","path","PngDBWriter","quantiles","MAX_VALUE","stats","saveAs","size","dirname","existsSync","mkdirSync","k","isNumeric","Number","max","sortedValues","j","v","indexOf","sortNumber","sort","frac","round","metaDataFile","writeKeyData","writePngData","writeFile","stringify","e","error","stack","recordKeys","fileName","Jimp","maxLen","Array","isArray","setPixel","image","warn","encodedValue","floor","rgbaToInt","setPixelColor","write","fullDataFile"],"mappings":"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"}